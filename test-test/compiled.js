// Generated by CoffeeScript 1.7.1

/*

This is to test the "test". The output should look something like that:

2014-05-28T05:29:21.394Z OK: 8, Exception: 0, Pending: 1
2014-05-28T05:29:22.392Z OK: 8, Exception: 0, Pending: 1
2014-05-28T05:29:23.392Z OK: 8, Exception: 0, Pending: 1
2014-05-28T05:29:24.394Z OK: 9, Exception: 0, Pending: 0

********** Failed Unit **********
    Test: root --> 
    Unit: 1+2+3=7
Expected: 7
  Actual: 6

********** Failed Unit **********
    Test: root --> 
    Unit: (obj.unit>1)=true
Expected: true
  Actual: false

********** Failed Unit **********
    Test: root --> nested test --> test 2 in nested test
    Unit: simple boolean test
Expected: true
  Actual: false

********** Failed Unit **********
    Test: root --> 
    Unit: ("1"===2)=true
Expected: true
  Actual: false

********** Failed Unit **********
    Test: root --> 
    Unit: {} is {}
Expected: {}
  Actual: {}

********** Failed Unit **********
    Test: root --> 
    Unit: [] is []
Expected: []
  Actual: []

********** Failed Unit **********
    Test: root --> 
    Unit: sampleNaN1=1
Expected: 1
  Actual: null

********** Failed Unit **********
    Test: root --> 
    Unit: NaN= 3
Expected: 3
  Actual: null

********** Failed Unit **********
    Test: root --> 
    Unit: '' =NaN
Expected: null
  Actual: ""

********** Failed Unit **********
    Test: root --> 
    Unit: 0=-0
Expected: 0
  Actual: 0

********** Failed Unit **********
    Test: root --> 
    Unit: 0 is -0
Expected: 0
  Actual: 0

********** Failed Unit **********
    Test: root --> 
    Unit: -0 is 0
Expected: 0
  Actual: 0

********** Failed Unit **********
    Test: root --> 
    Unit: b throws
Expected: exception
  Actual: no exception

********** Failed Unit **********
    Test: root --> 
    Unit: a throws /kkk/
Expected: an exception
  Actual: another exception

********** Failed Unit **********
    Test: root --> 
    Unit: a throws CustomError
Expected: an exception
  Actual: another exception

********** Failed Unit **********
    Test: root --> 
    Unit: a
Expected: no exception
  Actual: exception

Completed. 0 exceptional tests. 16 failed units.
 */

(function() {
  var Test,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if ((typeof exports !== "undefined" && exports !== null) && ((typeof module !== "undefined" && module !== null ? module.exports : void 0) != null)) {
    Test = require("../mate").testing.Test;
    global.unitsomething = function() {
      return true;
    };
  } else {
    Test = $mate.testing.Test;
    window.unitsomething = function() {
      return true;
    };
  }

  new Test("root").add("String.prototype test", function() {
    var str;
    str = "hello world";
    unit(' str.substr(4,1)="o" ');
    unit(' str.split(" ")=["hello","world"] ');
    unit(' str.split(" ")=["hello","world"] ');
    return unitsomething();
  }).add(function() {
    return unit('Math.round(5.3)=5');
  }).add(function() {
    return unit('1+2+3=7');
  }).add(function() {
    var obj;
    obj = {};
    obj.unit = function() {
      return Math.random();
    };
    obj.unit();
    return unit('  (obj.unit>1)=true');
  }).add(new Test("nested test").add("test 1 in nested test", function() {
    return unit('false=false');
  }).add("test 2 in nested test", function() {
    return unit("false=true", "simple boolean test");
  })).add("simple test 2", function() {
    return setTimeout(function() {
      unit("true=true", "truthy unit");
      return finish();
    }, 2500);
  }).add(function() {
    return unit("(\"1\"===2)=true");
  }).add(function() {
    var CustomError, a, b, c, sampleNaN1, sampleNaN2;
    unit("{} is {}");
    unit("    [] is []             ");
    unit("NaN is NaN");
    unit("NaN = NaN");
    sampleNaN1 = NaN;
    sampleNaN2 = NaN;
    unit('sampleNaN1=sampleNaN2');
    unit('sampleNaN1=1');
    unit("NaN= 3");
    unit("'' =NaN");
    unit("0=0");
    unit("0=-0");
    unit("0 is -0");
    unit("-0 is 0");
    CustomError = (function(_super) {
      __extends(CustomError, _super);

      function CustomError(msg) {
        CustomError.__super__.constructor.call(this, msg);
      }

      return CustomError;

    })(Error);
    a = function() {
      throw new Error();
    };
    b = function() {};
    c = function() {
      throw new CustomError();
    };
    unit('a throws');
    unit('b throws');
    unit('a throws /kkk/');
    unit('a throws /^$/');
    unit('a throws Error');
    unit('a throws CustomError');
    unit('c throws Error');
    unit('c throws CustomError');
    unit('b');
    return unit('a');
  }).run();

}).call(this);
