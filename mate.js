// Generated by CoffeeScript 1.6.3
/*
Mate
https://github.com/zhanzhenzhen/mate
(c) 2013 Zhenzhen Zhan
Mate may be freely distributed under the MIT license.
*/

var ArrayLazyWrapper, ObjectWithEvents, assert, compose, fail, repeat,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

ArrayLazyWrapper = (function() {
  function ArrayLazyWrapper(value, chainToCopy, itemToPush) {
    var _this = this;
    this._value = value;
    this._chain = (chainToCopy != null ? chainToCopy : []).slice(0);
    if (itemToPush != null) {
      this._chain.push(itemToPush);
    }
    Object.getter(this, "length", function() {
      return _this.force().length;
    });
  }

  ArrayLazyWrapper.prototype.force = function() {
    var m, n, _i, _len, _ref;
    n = this._value;
    _ref = this._chain;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      m = _ref[_i];
      n = m.fun.apply(n, m.args);
    }
    return n;
  };

  ArrayLazyWrapper.prototype.map = function() {
    return this._pushChain(Array.prototype.map, arguments);
  };

  ArrayLazyWrapper.prototype.filter = function() {
    return this._pushChain(Array.prototype.filter, arguments);
  };

  ArrayLazyWrapper.prototype.concat = function() {
    return this._pushChain(Array.prototype.concat, arguments);
  };

  ArrayLazyWrapper.prototype.portion = function() {
    return this._pushChain(Array.prototype.portion, arguments);
  };

  ArrayLazyWrapper.prototype.funSort = function() {
    return this._pushChain(Array.prototype.funSort, arguments);
  };

  ArrayLazyWrapper.prototype.funSortDescending = function() {
    return this._pushChain(Array.prototype.funSortDescending, arguments);
  };

  ArrayLazyWrapper.prototype.funReverse = function() {
    return this._pushChain(Array.prototype.funReverse, arguments);
  };

  ArrayLazyWrapper.prototype.random = function() {
    return this._pushChain(Array.prototype.random, arguments);
  };

  ArrayLazyWrapper.prototype.some = function() {
    return this._unwrapAndDo(Array.prototype.some, arguments);
  };

  ArrayLazyWrapper.prototype.every = function() {
    return this._unwrapAndDo(Array.prototype.every, arguments);
  };

  ArrayLazyWrapper.prototype.isEmpty = function() {
    return this._unwrapAndDo(Array.prototype.isEmpty, arguments);
  };

  ArrayLazyWrapper.prototype.at = function() {
    return this._unwrapAndDo(Array.prototype.at, arguments);
  };

  ArrayLazyWrapper.prototype.contains = function() {
    return this._unwrapAndDo(Array.prototype.contains, arguments);
  };

  ArrayLazyWrapper.prototype.first = function() {
    return this._unwrapAndDo(Array.prototype.first, arguments);
  };

  ArrayLazyWrapper.prototype.last = function() {
    return this._unwrapAndDo(Array.prototype.last, arguments);
  };

  ArrayLazyWrapper.prototype.single = function() {
    return this._unwrapAndDo(Array.prototype.single, arguments);
  };

  ArrayLazyWrapper.prototype.withMax = function() {
    return this._unwrapAndDo(Array.prototype.withMax, arguments);
  };

  ArrayLazyWrapper.prototype.withMin = function() {
    return this._unwrapAndDo(Array.prototype.withMin, arguments);
  };

  ArrayLazyWrapper.prototype.max = function() {
    return this._unwrapAndDo(Array.prototype.max, arguments);
  };

  ArrayLazyWrapper.prototype.min = function() {
    return this._unwrapAndDo(Array.prototype.min, arguments);
  };

  ArrayLazyWrapper.prototype.sum = function() {
    return this._unwrapAndDo(Array.prototype.sum, arguments);
  };

  ArrayLazyWrapper.prototype.average = function() {
    return this._unwrapAndDo(Array.prototype.average, arguments);
  };

  ArrayLazyWrapper.prototype.randomOne = function() {
    return this._unwrapAndDo(Array.prototype.randomOne, arguments);
  };

  ArrayLazyWrapper.prototype._pushChain = function(fun, args) {
    return new ArrayLazyWrapper(this._value, this._chain, {
      fun: fun,
      args: args
    });
  };

  ArrayLazyWrapper.prototype._unwrapAndDo = function(fun, args) {
    return fun.apply(this.force(), args);
  };

  return ArrayLazyWrapper;

})();

Array._elementOrUseSelector = function(element, selector) {
  if (selector != null) {
    return selector(element);
  } else {
    return element;
  }
};

Array.prototype._numberToIndex = function(pos) {
  if ((0 < pos && pos < 1)) {
    return pos = Math.round(pos * (this.length - 1));
  } else {
    return pos;
  }
};

Array.prototype._numberToLength = function(pos) {
  if ((0 < pos && pos < 1)) {
    return pos = Math.round(pos * this.length);
  } else {
    return pos;
  }
};

Array.prototype.copy = function() {
  return this.slice(0);
};

Array.prototype.isEmpty = function() {
  return this.length === 0;
};

Array.prototype.lazy = function() {
  return new ArrayLazyWrapper(this);
};

Array.prototype.portion = function(startIndex, length, endIndex) {
  startIndex = this._numberToIndex(startIndex);
  length = this._numberToLength(length);
  endIndex = this._numberToIndex(endIndex);
  return this.slice(startIndex, length != null ? startIndex + length : endIndex);
};

Array.prototype.at = function(index) {
  index = this._numberToIndex(index);
  assert((0 <= index && index < this.length));
  return this[index];
};

Array.prototype.contains = function(value) {
  return __indexOf.call(this, value) >= 0;
};

Array.prototype.first = function(predicate) {
  var queryResult;
  queryResult = predicate != null ? this.filter(predicate) : this;
  return queryResult.at(0);
};

Array.prototype.last = function(predicate) {
  var queryResult;
  queryResult = predicate != null ? this.filter(predicate) : this;
  return queryResult.at(queryResult.length - 1);
};

Array.prototype.single = function(predicate) {
  var queryResult;
  queryResult = predicate != null ? this.filter(predicate) : this;
  assert(queryResult.length === 1);
  return queryResult.at(0);
};

Array.prototype.withMax = function(selector) {
  var _this = this;
  return this.reduce(function(a, b, index) {
    if (Array._elementOrUseSelector(a, selector) > Array._elementOrUseSelector(b, selector)) {
      return a;
    } else {
      return b;
    }
  });
};

Array.prototype.withMin = function(selector) {
  var _this = this;
  return this.reduce(function(a, b, index) {
    if (Array._elementOrUseSelector(a, selector) < Array._elementOrUseSelector(b, selector)) {
      return a;
    } else {
      return b;
    }
  });
};

Array.prototype.max = function(selector) {
  return Array._elementOrUseSelector(this.withMax(selector), selector);
};

Array.prototype.min = function(selector) {
  return Array._elementOrUseSelector(this.withMin(selector), selector);
};

Array.prototype.sum = function(selector) {
  var _this = this;
  return this.reduce(function(a, b, index) {
    return (index === 1 ? Array._elementOrUseSelector(a, selector) : a) + Array._elementOrUseSelector(b, selector);
  });
};

Array.prototype.average = function(selector) {
  return this.sum(selector) / this.length;
};

Array.prototype._sort = function(keySelector, isDescending) {
  var _this = this;
  return this.copy().sort(function(a, b) {
    var a1, b1;
    a1 = Array._elementOrUseSelector(a, keySelector);
    b1 = Array._elementOrUseSelector(b, keySelector);
    if (a1 < b1) {
      if (isDescending) {
        return 1;
      } else {
        return -1;
      }
    } else if (a1 > b1) {
      if (isDescending) {
        return -1;
      } else {
        return 1;
      }
    } else {
      return 0;
    }
  });
};

Array.prototype.funSort = function(keySelector) {
  return this._sort(keySelector, false);
};

Array.prototype.funSortDescending = function(keySelector) {
  return this._sort(keySelector, true);
};

Array.prototype.funReverse = function() {
  return this.copy().reverse();
};

Array.prototype.randomOne = function() {
  return this[Math.randomInt(this.length)];
};

Array.prototype.random = function(count) {
  return this.copy().takeRandom(count);
};

Array.prototype.takeRandomOne = function() {
  var index, r;
  index = Math.randomInt(this.length);
  r = this[index];
  this.splice(index, 1);
  return r;
};

Array.prototype.takeRandom = function(count) {
  var _this = this;
  if (count == null) {
    count = this.length;
  }
  count = this._numberToLength(count);
  return repeat(count, function() {
    return _this.takeRandomOne();
  });
};

if (String.prototype.startsWith === void 0) {
  String.prototype.startsWith = function(s) {
    return this.indexOf(s) === 0;
  };
}

if (String.prototype.endsWith === void 0) {
  String.prototype.endsWith = function(s) {
    return this.lastIndexOf(s) === this.length - s.length;
  };
}

if (String.prototype.contains === void 0) {
  String.prototype.contains = function(s) {
    return this.indexOf(s) !== -1;
  };
}

if (Array.from === void 0) {
  Array.from = function(arrayLike) {
    var m, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = arrayLike.length; _i < _len; _i++) {
      m = arrayLike[_i];
      _results.push(m);
    }
    return _results;
  };
}

compose = function(functions) {
  if (arguments.length > 1) {
    functions = Array.from(arguments);
  }
  return function() {
    var args, m, _i, _len;
    args = arguments;
    for (_i = 0, _len = functions.length; _i < _len; _i++) {
      m = functions[_i];
      args = [m.apply(this, args)];
    }
    return args[0];
  };
};

fail = function(errorMessage) {
  throw new Error(errorMessage);
};

assert = function(condition, message) {
  if (!condition) {
    return fail(message);
  }
};

repeat = function(times, iterator) {
  var i, _i, _j, _results, _results1;
  if (typeof iterator === "function") {
    _results = [];
    for (i = _i = 0; 0 <= times ? _i < times : _i > times; i = 0 <= times ? ++_i : --_i) {
      _results.push(iterator());
    }
    return _results;
  } else {
    _results1 = [];
    for (i = _j = 0; 0 <= times ? _j < times : _j > times; i = 0 <= times ? ++_j : --_j) {
      _results1.push(iterator);
    }
    return _results1;
  }
};

Object.getter = function(obj, prop, fun) {
  return Object.defineProperty(obj, prop, {
    get: fun,
    configurable: true
  });
};

Object.setter = function(obj, prop, fun) {
  return Object.defineProperty(obj, prop, {
    set: fun,
    configurable: true
  });
};

Object.clone = function(x) {
  var key, y, _i, _len, _ref;
  y = {};
  _ref = Object.keys(x);
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    key = _ref[_i];
    y[key] = x[key];
  }
  return y;
};

JSON.clone = function(x) {
  return JSON.parse(JSON.stringify(x));
};

Math.radiansToDegrees = function(radians) {
  var d, rd;
  d = radians / Math.PI * 180;
  rd = Math.round(d);
  if (Math.abs(d - rd) < 0.0001) {
    return rd;
  } else {
    return d;
  }
};

Math.degreesToRadians = function(degrees) {
  return degrees / 180 * Math.PI;
};

Math.randomNumber = function(m, n) {
  if (m < n) {
    return m + Math.random() * (n - m);
  } else {
    return fail();
  }
};

Math.randomInt = function(m, n) {
  var max, min;
  min = n === void 0 ? 0 : m;
  max = n === void 0 ? m : n;
  return Math.floor(Math.randomNumber(min, max));
};

String.prototype.matches = function(regex) {
  var adjustedRegex, match, result;
  adjustedRegex = new RegExp(regex.source, "g");
  result = [];
  while (true) {
    match = adjustedRegex.exec(this);
    if (match != null) {
      result.push(match);
    } else {
      break;
    }
  }
  return result;
};

ObjectWithEvents = (function() {
  function ObjectWithEvents() {
    this._eventList = {};
  }

  ObjectWithEvents.prototype.addEventListener = function(eventName, handler) {
    var _base;
    if ((_base = this._eventList)[eventName] == null) {
      _base[eventName] = [];
    }
    if (this._eventList[eventName].indexOf(handler) === -1) {
      return this._eventList[eventName].push(handler);
    }
  };

  ObjectWithEvents.prototype.removeEventListener = function(eventName, handler) {
    var index;
    index = indexOf(handler);
    if (index !== -1) {
      return this._eventList[eventName].splice(index, 1);
    }
  };

  ObjectWithEvents.prototype.triggerEvent = function(eventName, arg) {
    var m, _base, _i, _len, _ref, _results;
    if ((_base = this._eventList)[eventName] == null) {
      _base[eventName] = [];
    }
    _ref = this._eventList[eventName];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      m = _ref[_i];
      _results.push(m(arg));
    }
    return _results;
  };

  return ObjectWithEvents;

})();

if ((typeof exports !== "undefined" && exports !== null) && ((typeof module !== "undefined" && module !== null ? module.exports : void 0) != null)) {
  global.compose = compose;
  global.fail = fail;
  global.assert = assert;
  global.repeat = repeat;
  global.ObjectWithEvents = ObjectWithEvents;
}
